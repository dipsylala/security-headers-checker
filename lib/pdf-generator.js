/**
 * Enhanced PDF Generator with Unicode Support using Puppeteer
 * Generates professional security analysis reports from HTML templates
 */

const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs').promises;

/**
 * Generate PDF report using Puppeteer (server-side)
 * @param {Object} analysisResults - Complete analysis results
 * @param {string} filename - Output filename (without extension)
 * @returns {Promise<Buffer>} PDF buffer
 */
async function generatePDFReport(analysisResults, filename = 'security-report') {
    let browser;
    
    try {
        console.log('üöÄ Starting PDF generation...');
        
        // Launch browser
        browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
        });
        
        console.log('‚úÖ Browser launched');
        
        const page = await browser.newPage();
        
        // Set viewport for consistent rendering
        await page.setViewport({ width: 1200, height: 800 });
        
        console.log('üé® Generating HTML content...');
        
        // Generate comprehensive HTML content with all details
        const htmlContent = generateComprehensiveReportHTML(analysisResults);
        
        console.log('üìÑ Setting page content...');
        
        // Set HTML content
        await page.setContent(htmlContent, { 
            waitUntil: 'networkidle0',
            timeout: 30000 
        });
        
        console.log('üéØ Generating PDF...');
        
        // Generate PDF with professional settings
        const pdfBuffer = await page.pdf({
            format: 'A4',
            printBackground: true,
            margin: {
                top: '20mm',
                right: '15mm',
                bottom: '20mm',
                left: '15mm'
            }
        });
        
        console.log(`‚úÖ PDF generated: ${pdfBuffer.length} bytes`);
        
        return pdfBuffer;
        
    } catch (error) {
        console.error('PDF generation error:', error);
        throw new Error(`Failed to generate PDF: ${error.message}`);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

/**
 * Generate simple HTML content for testing
 * @param {Object} results - Analysis results
 * @returns {string} HTML content
 */
function generateSimpleReportHTML(results) {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Analysis Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
            color: #333;
        }
        h1 { color: #2980b9; }
        h2 { color: #34495e; margin-top: 30px; }
        .score { font-size: 24px; font-weight: bold; color: #e74c3c; }
        .summary { background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .section { margin: 20px 0; }
        .pass { color: #27ae60; }
        .fail { color: #e74c3c; }
    </style>
</head>
<body>
    <h1>üõ°Ô∏è WebCheck Security Analysis Report</h1>
    
    <div class="summary">
        <h2>üìä Summary</h2>
        <p><strong>URL:</strong> ${results.url || 'N/A'}</p>
        <p><strong>Score:</strong> <span class="score">${results.score || 0}/100</span></p>
        <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
    </div>
    
    <div class="section">
        <h2>üîí SSL Certificate</h2>
        <p>Status: <span class="${results.ssl?.valid ? 'pass' : 'fail'}">${results.ssl?.valid ? 'Valid' : 'Invalid'}</span></p>
        ${results.ssl?.issuer ? `<p><strong>Issuer:</strong> ${results.ssl.issuer}</p>` : ''}
        ${results.ssl?.grade ? `<p><strong>Grade:</strong> ${results.ssl.grade}</p>` : ''}
    </div>
    
    <div class="section">
        <h2>üõ°Ô∏è Security Headers</h2>
        ${results.headers ? `
            <p>Total Headers Analyzed: ${results.headers.length}</p>
            <p>Present: ${results.headers.filter(h => h.present).length}</p>
            <p>Missing: ${results.headers.filter(h => !h.present).length}</p>
        ` : '<p>No header analysis available</p>'}
    </div>
    
    <div class="section">
        <h2>üîç Additional Checks</h2>
        ${results.additional ? `
            <p>Total Checks: ${results.additional.length}</p>
            <p>Passed: ${results.additional.filter(c => c.status === 'pass').length}</p>
            <p>Failed: ${results.additional.filter(c => c.status === 'fail').length}</p>
        ` : '<p>No additional checks available</p>'}
    </div>
    
    <footer style="margin-top: 50px; text-align: center; color: #666; border-top: 1px solid #eee; padding-top: 20px;">
        <p>Generated by WebCheck Validator ‚Ä¢ ${new Date().toLocaleDateString()}</p>
    </footer>
</body>
</html>`;
}

/**
 * Generate HTML content for the PDF report (Full Version)
 * @param {Object} results - Analysis results
 * @returns {string} HTML content
 */
function generateReportHTML(results) {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Analysis Report</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #2c3e50;
            background: white;
        }
        
        .container {
            max-width: 210mm;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        
        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 30px 0;
        }
        
        .summary-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }
        
        .score-circle {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            margin: 20px auto;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2em;
            font-weight: bold;
            color: white;
            position: relative;
        }
        
        .score-excellent { background: linear-gradient(135deg, #27ae60, #2ecc71); }
        .score-good { background: linear-gradient(135deg, #f39c12, #e67e22); }
        .score-poor { background: linear-gradient(135deg, #e74c3c, #c0392b); }
        
        .section {
            margin: 40px 0;
            page-break-inside: avoid;
        }
        
        .section-header {
            background: linear-gradient(90deg, #3498db, #2980b9);
            color: white;
            padding: 15px 20px;
            border-radius: 8px 8px 0 0;
            font-size: 1.3em;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .section-content {
            background: white;
            border: 1px solid #ddd;
            border-top: none;
            padding: 20px;
            border-radius: 0 0 8px 8px;
        }
        
        .status-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            margin: 8px 0;
            border-radius: 6px;
            border-left: 4px solid #ddd;
        }
        
        .status-pass {
            background: #d4edda;
            border-left-color: #28a745;
            color: #155724;
        }
        
        .status-fail {
            background: #f8d7da;
            border-left-color: #dc3545;
            color: #721c24;
        }
        
        .status-warning {
            background: #fff3cd;
            border-left-color: #ffc107;
            color: #856404;
        }
        
        .status-icon {
            font-size: 1.2em;
            margin-right: 10px;
            font-weight: bold;
        }
        
        .headers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .header-category {
            background: #f8f9fa;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .category-title {
            background: #495057;
            color: white;
            padding: 12px 15px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .category-stats {
            font-size: 0.9em;
            opacity: 0.9;
        }
        
        .header-list {
            padding: 15px;
        }
        
        .header-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        
        .header-item:last-child {
            border-bottom: none;
        }
        
        .recommendation-box {
            background: #e8f4fd;
            border: 1px solid #b8daff;
            border-radius: 6px;
            padding: 15px;
            margin: 15px 0;
        }
        
        .recommendation-high {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        
        .recommendation-medium {
            background: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
        }
        
        .recommendation-low {
            background: #d1ecf1;
            border-color: #bee5eb;
            color: #0c5460;
        }
        
        .ssl-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        
        .cert-chain {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .cert-level {
            background: white;
            margin: 10px 0;
            padding: 15px;
            border-radius: 6px;
            border-left: 4px solid #3498db;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
            margin: 8px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745, #20c997);
            transition: width 0.3s ease;
        }
        
        .progress-warning { background: linear-gradient(90deg, #ffc107, #fd7e14); }
        .progress-danger { background: linear-gradient(90deg, #dc3545, #e74c3c); }
        
        @media print {
            .container { padding: 0; }
            .section { page-break-inside: avoid; }
        }
    </style>
</head>
<body>
    <div class="container">
        ${generateHeaderSection(results)}
        ${generateSummarySection(results)}
        ${generateSSLSection(results)}
        ${generateHeadersSection(results)}
        ${generateSecurityChecksSection(results)}
        ${generateRecommendationsSection(results)}
    </div>
</body>
</html>`;
}

function generateHeaderSection(results) {
    return `
        <div class="header">
            <h1>üõ°Ô∏è Security Analysis Report</h1>
            <p>Comprehensive Web Security Assessment</p>
            <div style="margin-top: 20px; font-size: 1em;">
                <strong>${results.url || 'Unknown URL'}</strong><br>
                Generated: ${new Date(results.timestamp || Date.now()).toLocaleString()}
            </div>
        </div>
    `;
}

function generateSummarySection(results) {
    const score = results.score || 0;
    let scoreClass = 'score-poor';
    let scoreText = 'Needs Improvement';
    
    if (score >= 80) {
        scoreClass = 'score-excellent';
        scoreText = 'Excellent';
    } else if (score >= 60) {
        scoreClass = 'score-good';
        scoreText = 'Good';
    }
    
    return `
        <div class="section">
            <div class="section-header">
                üìä Security Score Overview
            </div>
            <div class="section-content">
                <div style="text-align: center;">
                    <div class="score-circle ${scoreClass}">
                        ${score}%
                    </div>
                    <h3>${scoreText} Security Posture</h3>
                    <p>Overall security score: ${score}/100</p>
                </div>
                
                <div class="summary-grid">
                    <div class="summary-card">
                        <h4>üîí SSL/TLS Status</h4>
                        <p><strong>Status:</strong> ${results.ssl?.valid ? '‚úÖ Valid' : '‚ùå Invalid'}</p>
                        <p><strong>Grade:</strong> ${results.ssl?.grade || 'N/A'}</p>
                    </div>
                    <div class="summary-card">
                        <h4>üõ°Ô∏è Security Headers</h4>
                        <p><strong>Present:</strong> ${results.headers?.filter(h => h.present).length || 0}</p>
                        <p><strong>Missing:</strong> ${results.headers?.filter(h => !h.present).length || 0}</p>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function generateSSLSection(results) {
    if (!results.ssl) return '';
    
    return `
        <div class="section">
            <div class="section-header">
                üîê SSL/TLS Certificate Analysis
            </div>
            <div class="section-content">
                <div class="ssl-details">
                    <div>
                        <h4>Certificate Information</h4>
                        <div class="status-item ${results.ssl.valid ? 'status-pass' : 'status-fail'}">
                            <span class="status-icon">${results.ssl.valid ? '‚úÖ' : '‚ùå'}</span>
                            <span>Certificate Status: ${results.ssl.valid ? 'Valid' : 'Invalid'}</span>
                        </div>
                        <p><strong>Issuer:</strong> ${results.ssl.issuer || 'Unknown'}</p>
                        <p><strong>Subject:</strong> ${results.ssl.subject || 'Unknown'}</p>
                    </div>
                    <div>
                        <h4>Technical Details</h4>
                        <p><strong>Key Length:</strong> ${results.ssl.keyLength || 'Unknown'} bits</p>
                        <p><strong>Protocol:</strong> ${results.ssl.protocol || 'Unknown'}</p>
                        <p><strong>Algorithm:</strong> ${results.ssl.signatureAlgorithm || 'Unknown'}</p>
                    </div>
                </div>
                
                ${results.ssl.validFrom && results.ssl.validTo ? `
                <div style="margin-top: 20px;">
                    <h4>Validity Period</h4>
                    <p>From: ${new Date(results.ssl.validFrom).toLocaleDateString()}</p>
                    <p>To: ${new Date(results.ssl.validTo).toLocaleDateString()}</p>
                </div>
                ` : ''}
                
                ${results.ssl.error ? `
                <div class="status-item status-fail">
                    <span class="status-icon">‚ö†Ô∏è</span>
                    <span>Error: ${results.ssl.error}</span>
                </div>
                ` : ''}
            </div>
        </div>
    `;
}

function generateHeadersSection(results) {
    if (!results.headers || results.headers.length === 0) return '';
    
    // Group headers by category
    const categories = {};
    results.headers.forEach(header => {
        const category = header.category || 'other';
        if (!categories[category]) categories[category] = [];
        categories[category].push(header);
    });
    
    let headersHTML = `
        <div class="section">
            <div class="section-header">
                üõ°Ô∏è Security Headers Analysis
            </div>
            <div class="section-content">
                <div class="headers-grid">
    `;
    
    Object.entries(categories).forEach(([category, headers]) => {
        const presentCount = headers.filter(h => h.present).length;
        const totalCount = headers.length;
        const percentage = Math.round((presentCount / totalCount) * 100);
        
        let progressClass = 'progress-danger';
        if (percentage >= 80) progressClass = 'progress-fill';
        else if (percentage >= 50) progressClass = 'progress-warning';
        
        headersHTML += `
            <div class="header-category">
                <div class="category-title">
                    ${category.charAt(0).toUpperCase() + category.slice(1)} Headers
                    <span class="category-stats">${presentCount}/${totalCount}</span>
                </div>
                <div class="progress-bar">
                    <div class="${progressClass}" style="width: ${percentage}%"></div>
                </div>
                <div class="header-list">
        `;
        
        headers.forEach(header => {
            headersHTML += `
                <div class="header-item">
                    <span>${header.name}</span>
                    <span style="color: ${header.present ? '#28a745' : '#dc3545'};">
                        ${header.present ? '‚úÖ' : '‚ùå'}
                    </span>
                </div>
            `;
        });
        
        headersHTML += `
                </div>
            </div>
        `;
    });
    
    headersHTML += `
                </div>
            </div>
        </div>
    `;
    
    return headersHTML;
}

function generateSecurityChecksSection(results) {
    if (!results.additional || results.additional.length === 0) return '';
    
    let checksHTML = `
        <div class="section">
            <div class="section-header">
                üîç Additional Security Checks
            </div>
            <div class="section-content">
    `;
    
    results.additional.forEach(check => {
        let statusClass = 'status-item';
        let icon = '‚ÑπÔ∏è';
        
        switch (check.status) {
            case 'pass':
                statusClass += ' status-pass';
                icon = '‚úÖ';
                break;
            case 'fail':
                statusClass += ' status-fail';
                icon = '‚ùå';
                break;
            case 'warning':
                statusClass += ' status-warning';
                icon = '‚ö†Ô∏è';
                break;
        }
        
        checksHTML += `
            <div class="${statusClass}">
                <span class="status-icon">${icon}</span>
                <div>
                    <strong>${check.name}</strong>
                    ${check.description ? `<p style="margin: 5px 0 0 0; font-size: 0.9em;">${check.description}</p>` : ''}
                    ${check.details ? `<p style="margin: 5px 0 0 0; font-size: 0.8em; opacity: 0.8;">${check.details}</p>` : ''}
                </div>
            </div>
        `;
    });
    
    checksHTML += `
            </div>
        </div>
    `;
    
    return checksHTML;
}

function generateRecommendationsSection(results) {
    if (!results.recommendations || results.recommendations.length === 0) return '';
    
    const priorities = {
        high: { title: 'High Priority', icon: 'üö®', class: 'recommendation-high' },
        medium: { title: 'Medium Priority', icon: '‚ö†Ô∏è', class: 'recommendation-medium' },
        low: { title: 'Low Priority', icon: '‚ÑπÔ∏è', class: 'recommendation-low' }
    };
    
    let recHTML = `
        <div class="section">
            <div class="section-header">
                üí° Security Recommendations
            </div>
            <div class="section-content">
    `;
    
    Object.entries(priorities).forEach(([priority, config]) => {
        const items = results.recommendations.filter(r => r.priority === priority);
        if (items.length === 0) return;
        
        recHTML += `<h4>${config.icon} ${config.title}</h4>`;
        
        items.forEach((rec, index) => {
            recHTML += `
                <div class="recommendation-box ${config.class}">
                    <strong>${index + 1}. ${rec.issue}</strong>
                    ${rec.recommendation ? `<p style="margin: 8px 0 0 0;">üí° ${rec.recommendation}</p>` : ''}
                    ${rec.impact ? `<p style="margin: 5px 0 0 0; font-size: 0.9em;">Impact: ${rec.impact}</p>` : ''}
                </div>
            `;
        });
    });
    
    recHTML += `
            </div>
        </div>
    `;
    
    return recHTML;
}

/**
 * Generate comprehensive HTML content for the PDF report with all details
 * @param {Object} results - Analysis results
 * @returns {string} HTML content
 */
function generateComprehensiveReportHTML(results) {
    const formatDate = (date) => new Date(date).toLocaleString();
    const formatScore = (score) => `${score || 0}`;
    
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebCheck Security Analysis Report</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #2c3e50;
            background: white;
            font-size: 12px;
        }
        
        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 25px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
        }
        
        .header h1 {
            font-size: 2.2em;
            margin-bottom: 8px;
            font-weight: 300;
        }
        
        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 25px 0;
        }
        
        .summary-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        
        .summary-card h3 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 1.1em;
        }
        
        .summary-card .value {
            font-size: 1.8em;
            font-weight: bold;
            color: #667eea;
        }
        
        .section {
            margin: 30px 0;
            break-inside: avoid;
        }
        
        .section-header {
            background: #34495e;
            color: white;
            padding: 12px 20px;
            border-radius: 8px 8px 0 0;
            font-size: 1.2em;
            font-weight: 600;
        }
        
        .section-content {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 0 0 8px 8px;
            border: 1px solid #e9ecef;
        }
        
        .ssl-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }
        
        .ssl-card {
            background: white;
            padding: 15px;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }
        
        .ssl-card h4 {
            color: #495057;
            margin-bottom: 10px;
            font-size: 1em;
        }
        
        .header-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
            font-size: 11px;
        }
        
        .header-table th, .header-table td {
            padding: 8px 12px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }
        
        .header-table th {
            background: #e9ecef;
            font-weight: 600;
            color: #495057;
        }
        
        .header-table tr:nth-child(even) {
            background: #f8f9fa;
        }
        
        .status-pass {
            color: #28a745;
            font-weight: bold;
        }
        
        .status-fail {
            color: #dc3545;
            font-weight: bold;
        }
        
        .status-warning {
            color: #ffc107;
            font-weight: bold;
        }
        
        .check-item {
            padding: 10px 0;
            border-bottom: 1px solid #e9ecef;
        }
        
        .check-item:last-child {
            border-bottom: none;
        }
        
        .check-name {
            font-weight: 600;
            color: #495057;
        }
        
        .check-description {
            color: #6c757d;
            font-size: 0.95em;
            margin-top: 5px;
        }
        
        .footer {
            margin-top: 40px;
            text-align: center;
            color: #6c757d;
            border-top: 2px solid #e9ecef;
            padding-top: 20px;
            font-size: 0.9em;
        }
        
        .grade-badge {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            color: white;
            font-size: 1.1em;
        }
        
        .grade-a { background: #28a745; }
        .grade-b { background: #17a2b8; }
        .grade-c { background: #ffc107; color: #212529; }
        .grade-d { background: #fd7e14; }
        .grade-f { background: #dc3545; }
        
        code {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 3px;
            border: 1px solid #e9ecef;
            font-family: 'Courier New', Consolas, monospace;
        }
        
        @media print {
            body { font-size: 10px; }
            .section { page-break-inside: avoid; }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>üõ°Ô∏è WebCheck Security Analysis Report</h1>
            <p>Comprehensive Security Assessment</p>
        </div>
        
        <!-- Summary -->
        <div class="summary-grid">
            <div class="summary-card">
                <h3>üìä Overall Score</h3>
                <div class="value">${formatScore(results.score)}/100</div>
            </div>
            <div class="summary-card">
                <h3>üåê Target URL</h3>
                <div style="font-size: 1.2em; color: #495057; word-break: break-all;">${results.url || 'N/A'}</div>
            </div>
            <div class="summary-card">
                <h3>üìÖ Analysis Date</h3>
                <div style="font-size: 1.2em; color: #495057;">${formatDate(new Date())}</div>
            </div>
        </div>
        
        ${generateSSLSection(results.details?.ssl || results.ssl, results.details?.detailedSsl || results.detailedSsl, results.details?.ssl?.tests || results.tests)}
        ${generateHeadersSection(results.details?.headers || results.headers)}
        ${generateAdditionalChecksSection(results.details?.additional || results.additional)}
        
        <!-- Footer -->
        <div class="footer">
            <p><strong>Generated by WebCheck Validator</strong></p>
            <p>Professional Security Analysis Tool ‚Ä¢ ${formatDate(new Date())}</p>
            <p>Visit our GitHub repository for more information and updates</p>
        </div>
    </div>
</body>
</html>`;
}

/**
 * Generate SSL/TLS section for PDF
 */
function generateSSLSection(ssl, detailedSsl, tests) {
    if (!ssl && !detailedSsl) return '';
    
    const sslData = ssl || {};
    const detailedData = detailedSsl || {};
    
    // Debug logging for certificate chain
    console.log('üîç PDF Generator - SSL Data Structure:');
    console.log('sslData.chain:', sslData.chain?.length || 'undefined');
    console.log('sslData.certificateChain:', sslData.certificateChain?.length || 'undefined');
    console.log('detailedData.chain:', detailedData.chain?.length || 'undefined');
    console.log('detailedData.certificateChain:', detailedData.certificateChain?.length || 'undefined');
    
    const getGradeClass = (grade) => {
        if (!grade) return 'grade-f';
        const g = grade.toLowerCase();
        if (g.includes('a')) return 'grade-a';
        if (g.includes('b')) return 'grade-b';
        if (g.includes('c')) return 'grade-c';
        if (g.includes('d')) return 'grade-d';
        return 'grade-f';
    };
    
    // Use the tests array passed as parameter
    const testsArray = tests && Array.isArray(tests) ? tests : [];
    
    return `
        <div class="section">
            <div class="section-header">
                üîí SSL/TLS Certificate Analysis
            </div>
            <div class="section-content">
                <div class="ssl-details">
                    <div class="ssl-card">
                        <h4>Certificate Status</h4>
                        <p><strong>Valid:</strong> <span class="${sslData.valid ? 'status-pass' : 'status-fail'}">${sslData.valid ? 'Yes' : 'No'}</span></p>
                        ${sslData.grade ? `<p><strong>Grade:</strong> <span class="grade-badge ${getGradeClass(sslData.grade)}">${sslData.grade}</span></p>` : ''}
                        ${sslData.score !== undefined ? `<p><strong>Score:</strong> ${sslData.score}/100</p>` : ''}
                    </div>
                    
                    ${sslData.issuer ? `
                    <div class="ssl-card">
                        <h4>Certificate Authority</h4>
                        <p><strong>Issuer:</strong> ${sslData.issuer}</p>
                        ${sslData.subject ? `<p><strong>Subject:</strong> ${sslData.subject}</p>` : ''}
                    </div>
                    ` : ''}
                    
                    ${sslData.validFrom || sslData.validTo ? `
                    <div class="ssl-card">
                        <h4>Validity Period</h4>
                        ${sslData.validFrom ? `<p><strong>Valid From:</strong> ${new Date(sslData.validFrom).toLocaleDateString()}</p>` : ''}
                        ${sslData.validTo ? `<p><strong>Valid To:</strong> ${new Date(sslData.validTo).toLocaleDateString()}</p>` : ''}
                        ${sslData.daysUntilExpiry !== undefined ? `<p><strong>Days Until Expiry:</strong> ${sslData.daysUntilExpiry}</p>` : ''}
                    </div>
                    ` : ''}
                    
                    ${detailedData.keyAlgorithm || detailedData.keySize ? `
                    <div class="ssl-card">
                        <h4>Key Information</h4>
                        ${detailedData.keyAlgorithm ? `<p><strong>Algorithm:</strong> ${detailedData.keyAlgorithm}</p>` : ''}
                        ${detailedData.keySize ? `<p><strong>Key Size:</strong> ${detailedData.keySize} bits</p>` : ''}
                        ${detailedData.signatureAlgorithm ? `<p><strong>Signature:</strong> ${detailedData.signatureAlgorithm}</p>` : ''}
                    </div>
                    ` : ''}
                </div>
                
                ${(sslData.chain && sslData.chain.length > 0) || (sslData.certificateChain && sslData.certificateChain.length > 0) || (detailedData.chain && detailedData.chain.length > 0) || (detailedData.certificateChain && detailedData.certificateChain.length > 0) ? `
                <h4 style="margin-top: 20px; margin-bottom: 15px;">üîó Certificate Chain</h4>
                <div class="ssl-details">
                    ${(sslData.chain || sslData.certificateChain || detailedData.chain || detailedData.certificateChain || []).map((cert, index) => {
                        const chainArray = sslData.chain || sslData.certificateChain || detailedData.chain || detailedData.certificateChain || [];
                        return `
                        <div class="ssl-card">
                            <h4>${index === 0 ? 'üéØ End Entity Certificate' : index === chainArray.length - 1 ? 'üèõÔ∏è Root Certificate' : 'üîó Intermediate Certificate'} ${index + 1}</h4>
                            <p><strong>Subject:</strong> ${cert.subject || 'Unknown'}</p>
                            <p><strong>Issuer:</strong> ${cert.issuer || 'Unknown'}</p>
                            ${cert.validFrom ? `<p><strong>Valid From:</strong> ${new Date(cert.validFrom).toLocaleDateString()}</p>` : ''}
                            ${cert.validTo ? `<p><strong>Valid To:</strong> ${new Date(cert.validTo).toLocaleDateString()}</p>` : ''}
                            ${cert.keyAlgorithm ? `<p><strong>Key Algorithm:</strong> ${cert.keyAlgorithm}</p>` : ''}
                            ${cert.keySize ? `<p><strong>Key Size:</strong> ${cert.keySize} bits</p>` : ''}
                            ${cert.signatureAlgorithm ? `<p><strong>Signature Algorithm:</strong> ${cert.signatureAlgorithm}</p>` : ''}
                            ${cert.serialNumber ? `<p><strong>Serial Number:</strong> ${cert.serialNumber}</p>` : ''}
                            ${cert.fingerprint ? `<p><strong>Fingerprint (SHA1):</strong> <code style="font-size: 0.8em; word-break: break-all;">${cert.fingerprint}</code></p>` : ''}
                        </div>
                    `}).join('')}
                </div>
                ` : ''}
                
                
                ${testsArray.length > 0 ? `
                <h4 style="margin-top: 20px; margin-bottom: 15px;">üß™ Detailed SSL Tests</h4>
                <table class="header-table">
                    <thead>
                        <tr>
                            <th>Test</th>
                            <th>Status</th>
                            <th>Description</th>
                            <th>Recommendation</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${testsArray.map(test => `
                            <tr>
                                <td>${test.name || 'Unknown Test'}</td>
                                <td><span class="${test.status === 'pass' ? 'status-pass' : test.status === 'fail' ? 'status-fail' : 'status-warning'}">${(test.status || 'unknown').toUpperCase()}</span></td>
                                <td>${test.description || 'N/A'}</td>
                                <td>${(test.status === 'pass') ? '' : (test.recommendation || '')}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
                ` : ''}
            </div>
        </div>
    `;
}

/**
 * Generate Security Headers section for PDF
 */
function generateHeadersSection(headers) {
    if (!headers || !Array.isArray(headers)) return '';
    
    const presentHeaders = headers.filter(h => h.present);
    const missingHeaders = headers.filter(h => !h.present);
    
    return `
        <div class="section">
            <div class="section-header">
                üõ°Ô∏è Security Headers Analysis
            </div>
            <div class="section-content">
                <div class="ssl-details">
                    <div class="ssl-card">
                        <h4>Summary</h4>
                        <p><strong>Total Headers:</strong> ${headers.length}</p>
                        <p><strong>Present:</strong> <span class="status-pass">${presentHeaders.length}</span></p>
                        <p><strong>Missing:</strong> <span class="status-fail">${missingHeaders.length}</span></p>
                    </div>
                </div>
                
                <h4 style="margin-top: 20px; margin-bottom: 15px;">üìã Header Details</h4>
                <table class="header-table">
                    <thead>
                        <tr>
                            <th>Header</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Category</th>
                            <th>Recommendation</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${headers.map(header => {
                            // Handle information headers differently (Hidden vs Missing, Disclosed vs Present)
                            let statusText, statusClass, recommendation;
                            if (header.category === 'information') {
                                // For information headers, absence is good
                                statusText = header.present ? 'Disclosed' : 'Hidden';
                                statusClass = header.present ? 'status-fail' : 'status-pass';
                                // Only recommend action when information is disclosed (bad)
                                recommendation = header.present ? (header.recommendation || 'Hide server information header') : '';
                            } else {
                                statusText = header.present ? 'Present' : 'Missing';
                                statusClass = header.present ? 'status-pass' : 'status-fail';
                                // Only recommend action when header is missing (bad)
                                recommendation = header.present ? '' : (header.recommendation || 'Implement this security header');
                            }
                            
                            return `
                                <tr>
                                    <td><strong>${header.name || 'Unknown'}</strong></td>
                                    <td><span class="${statusClass}">${statusText}</span></td>
                                    <td style="max-width: 200px; word-break: break-all;">${header.value || 'N/A'}</td>
                                    <td>${header.category || 'Unknown'}</td>
                                    <td>${recommendation}</td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            </div>
        </div>
    `;
}

/**
 * Generate Additional Security Checks section for PDF
 */
function generateAdditionalChecksSection(additional) {
    if (!additional || !Array.isArray(additional)) return '';
    
    const passedChecks = additional.filter(c => c.status === 'pass');
    const failedChecks = additional.filter(c => c.status === 'fail');
    const warningChecks = additional.filter(c => c.status === 'warning');
    
    return `
        <div class="section">
            <div class="section-header">
                üîç Additional Security Checks
            </div>
            <div class="section-content">
                <div class="ssl-details">
                    <div class="ssl-card">
                        <h4>Summary</h4>
                        <p><strong>Total Checks:</strong> ${additional.length}</p>
                        <p><strong>Passed:</strong> <span class="status-pass">${passedChecks.length}</span></p>
                        <p><strong>Failed:</strong> <span class="status-fail">${failedChecks.length}</span></p>
                        <p><strong>Warnings:</strong> <span class="status-warning">${warningChecks.length}</span></p>
                    </div>
                </div>
                
                <h4 style="margin-top: 20px; margin-bottom: 15px;">‚úÖ Check Results</h4>
                ${additional.map(check => `
                    <div class="check-item">
                        <div class="check-name">
                            ${check.name || 'Unknown Check'} - 
                            <span class="${check.status === 'pass' ? 'status-pass' : check.status === 'fail' ? 'status-fail' : 'status-warning'}">
                                ${(check.status || 'unknown').toUpperCase()}
                            </span>
                        </div>
                        ${check.description ? `<div class="check-description">${check.description}</div>` : ''}
                        ${check.details ? `<div class="check-description"><strong>Details:</strong> ${check.details}</div>` : ''}
                        ${(check.status !== 'pass' && check.recommendation) ? `<div class="check-description"><strong>Recommendation:</strong> ${check.recommendation}</div>` : ''}
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

module.exports = {
    generatePDFReport
};
